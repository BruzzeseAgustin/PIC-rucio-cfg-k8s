image:
  registry: docker.io
  repository: bitnami/postgresql
  tag: 12
  ## Specify a imagePullPolicy
  ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
  ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
  ##
  pullPolicy: IfNotPresent
  ## Set to true if you would like to see extra information on logs
  ## It turns BASH and/or NAMI debugging in the image
  ##
  debug: true


## Configure metrics exporter
##
metrics:
  enabled: true
  # resources: {}
  service:
    type: ClusterIP
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "9090"
    loadBalancerIP:
  serviceMonitor:
    enabled: true
    additionalLabels: {}
    # namespace: monitoring
    # interval: 30s
    # scrapeTimeout: 10s
  ## Custom PrometheusRule to be defined
  ## The value is evaluated as a template, so, for example, the value can depend on .Release or .Chart
  ## ref: https://github.com/coreos/prometheus-operator#customresourcedefinitions
  prometheusRule:
    enabled: false
    additionalLabels: {}
    namespace: ""
    ## These are just examples rules, please adapt them to your needs.
    ## Make sure to constraint the rules to the current postgresql service.
    ## rules:
    ##   - alert: HugeReplicationLag
    ##     expr: pg_replication_lag{service="{{ template "postgresql.fullname" . }}-metrics"} / 3600 > 1
    ##     for: 1m
    ##     labels:
    ##       severity: critical
    ##     annotations:
    ##       description: replication for {{ template "postgresql.fullname" . }} PostgreSQL is lagging by {{ "{{ $value }}" }} hour(s).
    ##       summary: PostgreSQL replication is lagging by {{ "{{ $value }}" }} hour(s).
    rules: []

databaseHost: rucio-db  
postgresqlUsername: rucio
postgresqlPassword: secret
postgresqlDatabase: rucio
postgresqlDataDir: /rucio/postgresql/data
postgresqlConfiguration:
  maxConnections: 1000
persistence:
  enabled: True
  storageClass: ceph-rbd-sc
  size: 100Gi
  accessModes:
  - ReadWriteOnce
  existingClaim: rucio-psql-pvc
  mountPath: /rucio/postgresql
master: 
  nodeSelector:
    # node: rucio
    kubernetes.io/hostname: kube01
primary:
  nodeSelector:
    # node: rucio
    kubernetes.io/hostname: kube01
